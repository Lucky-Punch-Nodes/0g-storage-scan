// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IDAEntranceCommitRootSubmission is an auto generated low-level Go binding around an user-defined struct.
type IDAEntranceCommitRootSubmission struct {
	DataRoot          [32]byte
	Epoch             *big.Int
	QuorumId          *big.Int
	ErasureCommitment BN254G1Point
	QuorumBitmap      []byte
	AggPkG2           BN254G2Point
	Signature         BN254G1Point
}

// IDASampleSampleRange is an auto generated low-level Go binding around an user-defined struct.
type IDASampleSampleRange struct {
	StartEpoch uint64
	EndEpoch   uint64
}

// IDASampleSampleTask is an auto generated low-level Go binding around an user-defined struct.
type IDASampleSampleTask struct {
	SampleHash      [32]byte
	PodasTarget     *big.Int
	RestSubmissions uint64
}

// SampleResponse is an auto generated low-level Go binding around an user-defined struct.
type SampleResponse struct {
	SampleSeed   [32]byte
	Epoch        uint64
	QuorumId     uint64
	LineIndex    uint32
	SublineIndex uint32
	Quality      *big.Int
	DataRoot     [32]byte
	BlobRoots    [3][32]byte
	Proof        [][32]byte
	Data         []byte
}

// DAEntranceMetaData contains all meta data concerning the DAEntrance contract.
var DAEntranceMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sampleRound\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lineIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sublineIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"DAReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumId\",\"type\":\"uint256\"}],\"name\":\"DataUpload\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumId\",\"type\":\"uint256\"}],\"name\":\"ErasureCommitmentVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sampleRound\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sampleHeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sampleSeed\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"podasTarget\",\"type\":\"uint256\"}],\"name\":\"NewSampleRound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DA_SIGNERS\",\"outputs\":[{\"internalType\":\"contractIDASigners\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PODAS_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PARAMS_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLICE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLICE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blobPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorumId\",\"type\":\"uint256\"}],\"name\":\"commitmentExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSampleSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochWindowSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSampleHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"podasTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundSubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"samplePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleRange\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"startEpoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"endEpoch\",\"type\":\"uint64\"}],\"internalType\":\"structIDASample.SampleRange\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleTask\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sampleHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"podasTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"restSubmissions\",\"type\":\"uint64\"}],\"internalType\":\"structIDASample.SampleTask\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceFeeRateBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseReward\",\"type\":\"uint256\"}],\"name\":\"setBaseReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blobPrice\",\"type\":\"uint256\"}],\"name\":\"setBlobPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_epochWindowSize\",\"type\":\"uint64\"}],\"name\":\"setEpochWindowSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_rewardRatio\",\"type\":\"uint64\"}],\"name\":\"setRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_targetRoundSubmissions\",\"type\":\"uint64\"}],\"name\":\"setRoundSubmissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"samplePeriod_\",\"type\":\"uint64\"}],\"name\":\"setSamplePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"name\":\"setServiceFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_dataRoots\",\"type\":\"bytes32[]\"}],\"name\":\"submitOriginalData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"sampleSeed\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"quorumId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"lineIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sublineIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"quality\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[3]\",\"name\":\"blobRoots\",\"type\":\"bytes32[3]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structSampleResponse\",\"name\":\"rep\",\"type\":\"tuple\"}],\"name\":\"submitSamplingResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"dataRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"erasureCommitment\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"quorumBitmap\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"aggPkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"signature\",\"type\":\"tuple\"}],\"internalType\":\"structIDAEntrance.CommitRootSubmission[]\",\"name\":\"_submissions\",\"type\":\"tuple[]\"}],\"name\":\"submitVerifiedCommitRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetRoundSubmissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetRoundSubmissionsNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBaseReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dataRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_epoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quorumId\",\"type\":\"uint256\"}],\"name\":\"verifiedErasureCommitment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b50604051620000209062000050565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b506001600160a01b03166080526200005e565b61058c80620041f383390190565b60805161416b6200008860003960008181610a980152818161138c015261232a015261416b6000f3fe6080604052600436106103355760003560e01c80638129fc1c116101ab578063b1be17ab116100f7578063e68e035b11610095578063f0f442601161006f578063f0f442601461090b578063f69027751461092b578063ff1877481461094b578063fff6cae91461096157600080fd5b8063e68e035b146108cd578063eafed6ce146108e3578063ed88c68e1461090357600080fd5b8063ca15c873116100d1578063ca15c8731461085a578063d4ae59c91461087a578063d547741f1461088d578063e2982c21146108ad57600080fd5b8063b1be17ab1461080e578063c05751111461082e578063c8d3b3591461084457600080fd5b8063988ea94e116101645780639da3a69b1161013e5780639da3a69b146107865780639fae1fa4146107c1578063a217fddf146107d7578063b15d20da146107ec57600080fd5b8063988ea94e1461071057806398920f57146107505780639b1d30911461076657600080fd5b80638129fc1c1461067057806388521ec7146106855780638abdf5aa146106a55780638bdcc712146106bb5780639010d07c146106d057806391d14854146106f057600080fd5b80633bab2a70116102855780636a53525d1161022357806376671808116101fd578063766718081461061857806376ad03bc1461062e5780637f1b5e4314610644578063807f063a1461065a57600080fd5b80636a53525d146105a65780636efc2555146105c65780637397eb331461060257600080fd5b80635626a47b1161025f5780635626a47b1461052e578063602b245a1461054357806361d027b314610558578063646033bc1461059057600080fd5b80633bab2a70146104e25780633d00448a146105025780633e8983371461051857600080fd5b806323dd60a6116102f25780632f2ff15d116102cc5780632f2ff15d1461046c5780632fc0534b1461048c57806331b3eb94146104a257806336568abe146104c257600080fd5b806323dd60a614610405578063248a9ca314610425578063257a3aa31461045657600080fd5b806301ffc9a71461033a5780630373a23a1461036f5780631192de9a1461039157806312577052146103b1578063158ef93e146103d5578063168a062c146103ef575b600080fd5b34801561034657600080fd5b5061035a6103553660046136ab565b610976565b60405190151581526020015b60405180910390f35b34801561037b57600080fd5b5061038f61038a3660046136d5565b6109a1565b005b34801561039d57600080fd5b5061038f6103ac36600461370a565b6109c7565b3480156103bd57600080fd5b506103c760405481565b604051908152602001610366565b3480156103e157600080fd5b5060005461035a9060ff1681565b3480156103fb57600080fd5b506103c7603a5481565b34801561041157600080fd5b5061038f6104203660046136d5565b610a28565b34801561043157600080fd5b506103c76104403660046136d5565b6000908152600160208190526040909120015490565b34801561046257600080fd5b506103c760435481565b34801561047857600080fd5b5061038f61048736600461373a565b610a4e565b34801561049857600080fd5b506103c7603e5481565b3480156104ae57600080fd5b5061038f6104bd36600461376a565b610a79565b3480156104ce57600080fd5b5061038f6104dd36600461373a565b610af7565b3480156104ee57600080fd5b5061038f6104fd36600461370a565b610b76565b34801561050e57600080fd5b506103c760475481565b34801561052457600080fd5b506103c760445481565b34801561053a57600080fd5b506103c7600281565b34801561054f57600080fd5b506103c7600381565b34801561056457600080fd5b50604a54610578906001600160a01b031681565b6040516001600160a01b039091168152602001610366565b34801561059c57600080fd5b506103c760455481565b3480156105b257600080fd5b5061035a6105c1366004613787565b610bfe565b3480156105d257600080fd5b506105db610c21565b6040805182516001600160401b039081168252602093840151169281019290925201610366565b34801561060e57600080fd5b506103c7603b5481565b34801561062457600080fd5b506103c760385481565b34801561063a57600080fd5b506103c760465481565b34801561065057600080fd5b506103c760415481565b34801561066657600080fd5b5061057861100081565b34801561067c57600080fd5b5061038f610ca5565b34801561069157600080fd5b5061038f6106a036600461370a565b610df7565b3480156106b157600080fd5b506103c760425481565b3480156106c757600080fd5b506103c7610f64565b3480156106dc57600080fd5b506105786106eb3660046137b3565b610f74565b3480156106fc57600080fd5b5061035a61070b36600461373a565b610f93565b34801561071c57600080fd5b50610725610fbe565b604080518251815260208084015190820152918101516001600160401b031690820152606001610366565b34801561075c57600080fd5b506103c760485481565b34801561077257600080fd5b5061038f6107813660046136d5565b611030565b34801561079257600080fd5b506107a66107a1366004613787565b611056565b60408051825181526020928301519281019290925201610366565b3480156107cd57600080fd5b506103c760395481565b3480156107e357600080fd5b506103c7600081565b3480156107f857600080fd5b506103c760008051602061411683398151915281565b34801561081a57600080fd5b5061038f61082936600461370a565b6110c6565b34801561083a57600080fd5b506103c760495481565b34801561085057600080fd5b506103c7603c5481565b34801561086657600080fd5b506103c76108753660046136d5565b61114e565b61038f610888366004613916565b611165565b34801561089957600080fd5b5061038f6108a836600461373a565b611344565b3480156108b957600080fd5b506103c76108c836600461376a565b61136a565b3480156108d957600080fd5b506103c7603f5481565b3480156108ef57600080fd5b5061038f6108fe366004613aa0565b6113f9565b61038f6116fc565b34801561091757600080fd5b5061038f61092636600461376a565b61171d565b34801561093757600080fd5b5061038f610946366004613c38565b611760565b34801561095757600080fd5b506103c7603d5481565b34801561096d57600080fd5b5061038f611c88565b60006001600160e01b03198216635a05180f60e01b148061099b575061099b82611c9a565b92915050565b6000805160206141168339815191526109b981611ccf565b6109c1611c88565b50604655565b6000805160206141168339815191526109df81611ccf565b6109e7611c88565b6001600160401b038216604855603a54600003610a2457604854610a0b8143613d6d565b610a16906001613d81565b610a209190613d94565b603b555b5050565b600080516020614116833981519152610a4081611ccf565b610a48611c88565b50604755565b60008281526001602081905260409091200154610a6a81611ccf565b610a748383611cdc565b505050565b6040516351cff8d960e01b81526001600160a01b0382811660048301527f000000000000000000000000000000000000000000000000000000000000000016906351cff8d990602401600060405180830381600087803b158015610adc57600080fd5b505af1158015610af0573d6000803e3d6000fd5b5050505050565b6001600160a01b0381163314610b6c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610a248282611cfe565b600080516020614116833981519152610b8e81611ccf565b610b96611c88565b6000826001600160401b031611610bef5760405162461bcd60e51b815260206004820152601d60248201527f52657761726420726174696f206d757374206265206e6f6e2d7a65726f0000006044820152606401610b63565b506001600160401b0316604555565b600080610c0c858585611056565b9050610c1781611d20565b1595945050505050565b6040805180820190915260008082526020820152610c3d611c88565b60008060006038541115610c5d576001603854610c5a9190613db3565b90505b6044548110610c82576001604454610c759190613db3565b610c7f9082613db3565b91505b604080518082019091526001600160401b03928316815291166020820152919050565b60005460ff1615610d045760405162461bcd60e51b8152602060048201526024808201527f5a67496e697469616c697a61626c653a20616c726561647920696e697469616c6044820152631a5e995960e21b6064820152608401610b63565b6000805460ff19166001178155610d2190610d1c3390565b611cdc565b610d3960008051602061411683398151915233611cdc565b6110006001600160a01b031663f4145a836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9d9190613dc6565b603855601e6048819055610db18143613d6d565b610dbc906001613d81565b610dc69190613d94565b603b55610dd66080600019613d6d565b603c55601460435561012c60445562124f8060455560006046819055604755565b600080516020614116833981519152610e0f81611ccf565b610e17611c88565b603e54610e25906004613d94565b826001600160401b03161115610e895760405162461bcd60e51b8152602060048201526024808201527f496e63726561736520726f756e64207375626d697373696f6e7320746f6f206c6044820152636172676560e01b6064820152608401610b63565b6004603e54610e989190613d6d565b826001600160401b03161015610efc5760405162461bcd60e51b8152602060048201526024808201527f446563726561736520726f756e64207375626d697373696f6e7320746f6f206c6044820152636172676560e01b6064820152608401610b63565b6000826001600160401b031611610f555760405162461bcd60e51b815260206004820181905260248201527f526f756e64207375626d697373696f6e732063616e6e6f74206265207a65726f6044820152606401610b63565b506001600160401b0316604355565b610f716080600019613d6d565b81565b6000828152600260205260408120610f8c9083611d36565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6040805160608101825260008082526020820181905291810191909152610fe3611c88565b6000603e546002610ff49190613d94565b905060405180606001604052806039548152602001603c548152602001603d548361101f9190613db3565b6001600160401b0316905292915050565b60008051602061411683398151915261104881611ccf565b611050611c88565b50604955565b604080518082018252600080825260209182018190528251808301969096528583019490945260608086019390935281518086039093018352608085018083528351938201939093208452603590529182902060c084019092528154815260019091015460a09092019190915290565b6000805160206141168339815191526110de81611ccf565b6110e6611c88565b6000826001600160401b03161161113f5760405162461bcd60e51b815260206004820181905260248201527f45706f63682077696e646f772073697a652063616e6e6f74206265207a65726f6044820152606401610b63565b506001600160401b0316604455565b600081815260026020526040812061099b90611d42565b61116d611c88565b604754815161117c9190613d94565b3410156111c45760405162461bcd60e51b81526020600482015260166024820152754e6f7420656e6f75676820646120626c6f622066656560501b6044820152606401610b63565b34603f60008282546111d69190613d81565b9091555050603854604051635ecba50360e01b815260009161100091635ecba503916112089160040190815260200190565b602060405180830381865afa158015611225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112499190613dc6565b90506000811161129b5760405162461bcd60e51b815260206004820152601960248201527f4441456e7472616e63653a204e6f204441205369676e657273000000000000006044820152606401610b63565b8060365460016112ab9190613d81565b6112b59190613ddf565b603655815160005b8181101561133e577ff0bf37f8713754493879920443065424c575888634675f146c115709bbb59acb8482815181106112f8576112f8613df3565b6020026020010151603854603654604051611326939291909283526020830191909152604082015260600190565b60405180910390a161133781613e09565b90506112bd565b50505050565b6000828152600160208190526040909120015461136081611ccf565b610a748383611cfe565b6040516371d4ed8d60e11b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e3a9db1a90602401602060405180830381865afa1580156113d5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190613dc6565b805160005b81811015610a745761146883828151811061141b5761141b613df3565b60200260200101516000015184838151811061143957611439613df3565b60200260200101516020015185848151811061145757611457613df3565b602002602001015160400151610bfe565b6116ec5760008060006110006001600160a01b03166350b7373987868151811061149457611494613df3565b6020026020010151602001518887815181106114b2576114b2613df3565b6020026020010151604001518988815181106114d0576114d0613df3565b6020026020010151608001516040518463ffffffff1660e01b81526004016114fa93929190613e72565b608060405180830381865afa158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b9190613e9a565b92509250925061156d8387868151811061155757611557613df3565b6020026020010151611d4c90919063ffffffff16565b611578600382613d94565b611583836002613d94565b11156115e05760405162461bcd60e51b815260206004820152602660248201527f444152656769737472793a20696e73756666696369656e74207369676e656420604482015265736c6963657360d01b6064820152608401610b63565b8584815181106115f2576115f2613df3565b6020026020010151606001516035600061162489888151811061161757611617613df3565b6020026020010151611f09565b81526020808201929092526040016000208251815591015160019091015585517f0f1b20d87bebd11dddaaab51f01cf2726880cb3f8073b636dbafa2aa8cacd2569087908690811061167857611678613df3565b60200260200101516000015187868151811061169657611696613df3565b6020026020010151602001518887815181106116b4576116b4613df3565b6020026020010151604001516040516116e0939291909283526020830191909152604082015260600190565b60405180910390a15050505b6116f581613e09565b90506113fe565b611704611c88565b34604160008282546117169190613d81565b9091555050565b60008051602061411683398151915261173581611ccf565b61173d611c88565b50604a80546001600160a01b0319166001600160a01b0392909216919091179055565b611768611c88565b8051602080830151604080850151606086015160808701518351808701979097526001600160c01b031960c095861b8116888601529290941b90911660488601526001600160e01b031960e091821b8116605087015292901b90911660548401528051808403603801815260589093019052815191012060009060008181526037602052604090205490915060ff161561183c5760405162461bcd60e51b8152602060048201526015602482015274223ab83634b1b0ba32b21039bab136b4b9b9b4b7b760591b6044820152606401610b63565b6000818152603760205260409020805460ff19166001179055603a546118a45760405162461bcd60e51b815260206004820152601e60248201527f53616d706c6520726f756e6420302063616e6e6f74206265206d696e656400006044820152606401610b63565b603e546118b2906002613d94565b603d541061190c5760405162461bcd60e51b815260206004820152602160248201527f546f6f206d616e79207375626d697373696f6e7320696e206f6e6520726f756e6044820152601960fa1b6064820152608401610b63565b6039548251146119565760405162461bcd60e51b8152602060048201526015602482015274155b9b585d18da1959081cd85b5c1b19481cd95959605a1b6044820152606401610b63565b603c548260a0015111156119a25760405162461bcd60e51b8152602060048201526013602482015272145d585b1a5d1e481b9bdd081c995858da1959606a1b6044820152606401610b63565b6119cb8260c0015183602001516001600160401b031684604001516001600160401b0316610bfe565b611a0f5760405162461bcd60e51b8152602060048201526015602482015274155b9c9958dbdc9919590818dbdb5b5a5d1b595b9d605a1b6044820152606401610b63565b60385460445483602001516001600160401b0316611a2d9190613d81565b1015611a7b5760405162461bcd60e51b815260206004820152601a60248201527f45706f6368206861732073746f707065642073616d706c696e670000000000006044820152606401610b63565b60385482602001516001600160401b031610611ad95760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742073616d706c652063757272656e742065706f636800000000006044820152606401610b63565b611ae282611f4f565b602082015160408084015160608501519151637d37e5d360e11b81526001600160401b0393841660048201529216602483015263ffffffff1660448201526000906110009063fa6fcba690606401602060405180830381865afa158015611b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b719190613eec565b90506001603d6000828254611b869190613d81565b9091555050604554604054600091611b9d91613d6d565b90508060406000828254611bb19190613db3565b90915550611bbf90506122d4565b611bc99082613d81565b90508015611bdb57611bdb828261230b565b83602001516001600160401b0316603a54836001600160a01b03167fc3898eb7106c1cb2f727da316a76320c0035f5692950aa7f6b65d20a5efaedc587604001518860c001518960a001518a606001518b6080015189604051611c7a969594939291906001600160401b039690961686526020860194909452604085019290925263ffffffff908116606085015216608083015260a082015260c00190565b60405180910390a450505050565b611c90612383565b611c98612404565b565b60006001600160e01b03198216637965db0b60e01b148061099b57506301ffc9a760e01b6001600160e01b031983161461099b565b611cd981336124be565b50565b611ce68282612517565b6000828152600260205260409020610a749082612582565b611d088282612597565b6000828152600260205260409020610a7490826125fe565b805160009015801561099b575050602001511590565b6000610f8c8383612613565b600061099b825490565b6000611d578361263d565b60a084015160c085015180516020808301518751888301518651848801518951868b01516040519b9c50999a98996000997f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000199611dbd9990989796959493929101613f2c565b6040516020818303038152906040528051906020012060001c611de09190613ddf565b9050600080611e4e611dfc611df589866126b7565b8690612748565b611e046127dd565b611e44611e3d87611e37604080518082018252600080825260209182015281518083019092526001825260029082015290565b906126b7565b8a90612748565b886201d4c061289d565b9150915081611eb25760405162461bcd60e51b815260206004820152602a60248201527f444152656769737472793a2070616972696e6720707265636f6d70696c652063604482015269185b1b0819985a5b195960b21b6064820152608401610b63565b80611eff5760405162461bcd60e51b815260206004820181905260248201527f444152656769737472793a207369676e617475726520697320696e76616c69646044820152606401610b63565b5050505050505050565b805160208083015160408085015181518085019590955284820192909252606080850192909252805180850390920182526080909301909252815191012060009061099b565b8051611f9d5760405162461bcd60e51b815260206004820152601b60248201527f53616d706c6520736565642063616e6e6f7420626520656d70747900000000006044820152606401610b63565b611faa6003610400613f78565b6001600160401b0316816060015163ffffffff16106120025760405162461bcd60e51b8152602060048201526014602482015273092dcc6dee4e4cac6e840d8d2dcca40d2dcc8caf60631b6044820152606401610b63565b60206001600160401b0316816080015163ffffffff16106120655760405162461bcd60e51b815260206004820152601860248201527f496e636f7272656374207375622d6c696e6520696e64657800000000000000006044820152606401610b63565b60006120ea826000015183602001516001600160401b031684604001516001600160401b03168560c00151866060015163ffffffff1660408051602080820197909752808201959095526060850193909352608084019190915260c01b6001600160c01b03191660a08301528051608881840301815260a89092019052805191012090565b9050600061210882846080015163ffffffff16856101200151612ac1565b90508061211783600019613db3565b10156121585760405162461bcd60e51b815260206004820152601060248201526f5175616c697479206f766572666c6f7760801b6044820152606401610b63565b60a08301516121678284613d81565b146121a85760405162461bcd60e51b8152602060048201526011602482015270496e636f7272656374207175616c69747960781b6044820152606401610b63565b60206121b661040082613f78565b6121c09190613fa7565b6001600160401b031683610120015151146122155760405162461bcd60e51b8152602060048201526015602482015274092dcc6dee4e4cac6e840c8c2e8c240d8cadccee8d605b1b6044820152606401610b63565b6000612225846101200151612af8565b90506000610400856060015163ffffffff166122419190613fa7565b905060008560e00151826001600160401b03166003811061226457612264613df3565b602002015190506000866080015163ffffffff166020610400896060015163ffffffff166122929190613fcd565b61229c9190613f78565b6122a69190613ff3565b90506122b9848389610100015184612d2a565b6122cb8760e001518860c00151612e36565b50505050505050565b6000604654604154116122e9576041546122ed565b6046545b905080604160008282546123019190613db3565b9250508190555090565b60405163f340fa0160e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f340fa019083906024016000604051808303818588803b15801561236f57600080fd5b505af11580156122cb573d6000803e3d6000fd5b60006110006001600160a01b031663f4145a836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e99190613dc6565b905080603854036123f75750565b6038819055611cd9612e82565b603b5443101561241057565b603a541561242457612420612ee8565b603c555b6001603a60008282546124379190613d81565b9091555050603b5461244a600182613db3565b40603955604854603b8054600090612463908490613d81565b9091555050604354603e556000603d55603a54603954603c546040805185815260208101939093528201527fdfb5db5886e81f083727f21152a2a83457e99364e9f104e1aa10bbd6d9b4b95f9060600160405180910390a250565b6124c88282610f93565b610a24576124d581612fbe565b6124e0836020612fd0565b6040516020016124f1929190614013565b60408051601f198184030181529082905262461bcd60e51b8252610b6391600401614088565b6125218282610f93565b610a245760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610f8c836001600160a01b03841661316b565b6125a18282610f93565b15610a245760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f8c836001600160a01b0384166131ba565b600082600001828154811061262a5761262a613df3565b9060005260206000200154905092915050565b604080518082019091526000808252602082015281516020808401516040808601516060870151805190850151925161099b9661269c969095949101948552602085019390935260408401919091526060830152608082015260a00190565b604051602081830303815290604052805190602001206132b4565b60408051808201909152600080825260208201526126d36135d1565b835181526020808501519082015260408082018490526000908360608460076107d05a03fa9050808061270257fe5b50806127405760405162461bcd60e51b815260206004820152600d60248201526c1958cb5b5d5b0b59985a5b1959609a1b6044820152606401610b63565b505092915050565b60408051808201909152600080825260208201526127646135ef565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa9050808061279f57fe5b50806127405760405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b6044820152606401610b63565b6127e561360d565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820182528681526020808201869052825180840190935286835282018490526000918291906128cf613632565b60005b6002811015612a945760006128e8826006613d94565b90508482600281106128fc576128fc613df3565b6020020151518361290e836000613d81565b600c811061291e5761291e613df3565b602002015284826002811061293557612935613df3565b6020020151602001518382600161294c9190613d81565b600c811061295c5761295c613df3565b602002015283826002811061297357612973613df3565b6020020151515183612986836002613d81565b600c811061299657612996613df3565b60200201528382600281106129ad576129ad613df3565b60200201515160016020020151836129c6836003613d81565b600c81106129d6576129d6613df3565b60200201528382600281106129ed576129ed613df3565b602002015160200151600060028110612a0857612a08613df3565b602002015183612a19836004613d81565b600c8110612a2957612a29613df3565b6020020152838260028110612a4057612a40613df3565b602002015160200151600160028110612a5b57612a5b613df3565b602002015183612a6c836005613d81565b600c8110612a7c57612a7c613df3565b60200201525080612a8c81613e09565b9150506128d2565b50612a9d613651565b60006020826101808560088cfa9151919c9115159b50909950505050505050505050565b6000838383604051602001612ad89392919061409b565b60408051601f198184030181529190528051602090910120949350505050565b80516000906101008110801590612b195750612b15600182613db3565b8116155b612b845760405162461bcd60e51b815260206004820152603660248201527f44617461206c656e677468206d7573742062652067726561746572207468616e60448201527510191a9b1030b7321030903837bbb2b91037b310191760511b6064820152608401610b63565b6000612b9261010083613d6d565b90506000816001600160401b03811115612bae57612bae6137d5565b604051908082528060200260200182016040528015612bd7578160200160208202803683370190505b50905060005b82811015612c255761010081810287016020012082518190849084908110612c0757612c07613df3565b60209081029190910101525080612c1d81613e09565b915050612bdd565b505b6001821115612d05576000612c3d600284613d6d565b905060005b81811015612cfd57612cce83612c59836002613d94565b81518110612c6957612c69613df3565b602002602001015184836002612c7f9190613d94565b612c8a906001613d81565b81518110612c9a57612c9a613df3565b6020026020010151604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b838281518110612ce057612ce0613df3565b602090810291909101015280612cf581613e09565b915050612c42565b509150612c27565b80600081518110612d1857612d18613df3565b60200260200101519350505050919050565b8360005b8351811015612df0576000848281518110612d4b57612d4b613df3565b60200260200101519050600284612d629190613fcd565b6001600160401b0316600003612da157604080516020808201869052818301849052825180830384018152606090920190925280519101209250612dcc565b6040805160208082018490528183018690528251808303840181526060909201909252805191012092505b6001846001600160401b0316901c9350508080612de890613e09565b915050612d2e565b50838114610af05760405162461bcd60e51b8152602060048201526013602482015272125b98dbdc9c9958dd08189b1bd888149bdbdd606a1b6044820152606401610b63565b80612e4083613343565b14610a245760405162461bcd60e51b8152602060048201526012602482015271125b98dbdc9c9958dd0819185d18549bdbdd60721b6044820152606401610b63565b6000612710604954603f54612e979190613d94565b612ea19190613d6d565b905080603f54612eb19190613db3565b60406000828254612ec29190613d81565b90915550506000603f558015611cd957604a54611cd9906001600160a01b03168261338d565b60008060006020603c54901c9050603e54603d541115612f48576008603e54603e54603d54612f179190613db3565b612f219084613d94565b612f2b9190613d6d565b612f359190613d6d565b9150612f418282613db3565b9050612f8a565b6008603e54603d54603e54612f5d9190613db3565b612f679084613d94565b612f719190613d6d565b612f7b9190613d6d565b9150612f878282613d81565b90505b6020612f996080600019613d6d565b901c8110612fb557612fae6080600019613d6d565b9250505090565b60201b92915050565b606061099b6001600160a01b03831660145b60606000612fdf836002613d94565b612fea906002613d81565b6001600160401b03811115613001576130016137d5565b6040519080825280601f01601f19166020018201604052801561302b576020820181803683370190505b509050600360fc1b8160008151811061304657613046613df3565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061307557613075613df3565b60200101906001600160f81b031916908160001a9053506000613099846002613d94565b6130a4906001613d81565b90505b600181111561311c576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106130d8576130d8613df3565b1a60f81b8282815181106130ee576130ee613df3565b60200101906001600160f81b031916908160001a90535060049490941c93613115816140c8565b90506130a7565b508315610f8c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b63565b60008181526001830160205260408120546131b25750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561099b565b50600061099b565b600081815260018301602052604081205480156132a35760006131de600183613db3565b85549091506000906131f290600190613db3565b905081811461325757600086600001828154811061321257613212613df3565b906000526020600020015490508087600001848154811061323557613235613df3565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613268576132686140df565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061099b565b600091505061099b565b5092915050565b6040805180820190915260008082526020820152600080806132e46000805160206140f683398151915286613ddf565b90505b6132f0816134a6565b90935091506000805160206140f68339815191528283098303613329576040805180820190915290815260208101919091529392505050565b6000805160206140f68339815191526001820890506132e7565b805160009061099b90613385908460015b6020020151604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b836002613354565b804710156133dd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b63565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461342a576040519150601f19603f3d011682016040523d82523d6000602084013e61342f565b606091505b5050905080610a745760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610b63565b600080806000805160206140f683398151915260036000805160206140f6833981519152866000805160206140f683398151915288890909089050600061351c827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f526000805160206140f6833981519152613528565b91959194509092505050565b600080613533613651565b61353b61366f565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa9250828061357857fe5b50826135c65760405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c7572650000000000006044820152606401610b63565b505195945050505050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806040016040528061362061368d565b815260200161362d61368d565b905290565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6000602082840312156136bd57600080fd5b81356001600160e01b031981168114610f8c57600080fd5b6000602082840312156136e757600080fd5b5035919050565b80356001600160401b038116811461370557600080fd5b919050565b60006020828403121561371c57600080fd5b610f8c826136ee565b6001600160a01b0381168114611cd957600080fd5b6000806040838503121561374d57600080fd5b82359150602083013561375f81613725565b809150509250929050565b60006020828403121561377c57600080fd5b8135610f8c81613725565b60008060006060848603121561379c57600080fd5b505081359360208301359350604090920135919050565b600080604083850312156137c657600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561380d5761380d6137d5565b60405290565b60405160e081016001600160401b038111828210171561380d5761380d6137d5565b60405161014081016001600160401b038111828210171561380d5761380d6137d5565b604051601f8201601f191681016001600160401b0381118282101715613880576138806137d5565b604052919050565b60006001600160401b038211156138a1576138a16137d5565b5060051b60200190565b600082601f8301126138bc57600080fd5b813560206138d16138cc83613888565b613858565b82815260059290921b840181019181810190868411156138f057600080fd5b8286015b8481101561390b57803583529183019183016138f4565b509695505050505050565b60006020828403121561392857600080fd5b81356001600160401b0381111561393e57600080fd5b61394a848285016138ab565b949350505050565b60006040828403121561396457600080fd5b61396c6137eb565b9050813581526020820135602082015292915050565b600082601f83011261399357600080fd5b81356001600160401b038111156139ac576139ac6137d5565b6139bf601f8201601f1916602001613858565b8181528460208386010111156139d457600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112613a0257600080fd5b604051604081018181106001600160401b0382111715613a2457613a246137d5565b8060405250806040840185811115613a3b57600080fd5b845b81811015613a55578035835260209283019201613a3d565b509195945050505050565b600060808284031215613a7257600080fd5b613a7a6137eb565b9050613a8683836139f1565b8152613a9583604084016139f1565b602082015292915050565b60006020808385031215613ab357600080fd5b82356001600160401b0380821115613aca57600080fd5b818501915085601f830112613ade57600080fd5b8135613aec6138cc82613888565b81815260059190911b83018401908481019088831115613b0b57600080fd5b8585015b83811015613bcf57803585811115613b275760008081fd5b8601610180818c03601f19011215613b3f5760008081fd5b613b47613813565b8882013581526040808301358a8301526060808401358284015260809150613b718e838601613952565b9083015260c08381013589811115613b895760008081fd5b613b978f8d83880101613982565b8385015250613ba98e60e08601613a60565b60a0840152613bbc8e6101608601613952565b9083015250845250918601918601613b0f565b5098975050505050505050565b803563ffffffff8116811461370557600080fd5b600082601f830112613c0157600080fd5b604051606081018181106001600160401b0382111715613c2357613c236137d5565b604052806060840185811115613a3b57600080fd5b600060208284031215613c4a57600080fd5b81356001600160401b0380821115613c6157600080fd5b908301906101808286031215613c7657600080fd5b613c7e613835565b82358152613c8e602084016136ee565b6020820152613c9f604084016136ee565b6040820152613cb060608401613bdc565b6060820152613cc160808401613bdc565b608082015260a083013560a082015260c083013560c0820152613ce78660e08501613bf0565b60e082015261014083013582811115613cff57600080fd5b613d0b878286016138ab565b6101008301525061016083013582811115613d2557600080fd5b613d3187828601613982565b6101208301525095945050505050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082613d7c57613d7c613d41565b500490565b8082018082111561099b5761099b613d57565b6000816000190483118215151615613dae57613dae613d57565b500290565b8181038181111561099b5761099b613d57565b600060208284031215613dd857600080fd5b5051919050565b600082613dee57613dee613d41565b500690565b634e487b7160e01b600052603260045260246000fd5b600060018201613e1b57613e1b613d57565b5060010190565b60005b83811015613e3d578181015183820152602001613e25565b50506000910152565b60008151808452613e5e816020860160208601613e22565b601f01601f19169290920160200192915050565b838152826020820152606060408201526000613e916060830184613e46565b95945050505050565b60008060008385036080811215613eb057600080fd5b6040811215613ebe57600080fd5b50613ec76137eb565b8451815260208086015190820152604085015160609095015190969495509392505050565b600060208284031215613efe57600080fd5b8151610f8c81613725565b8060005b600281101561133e578151845260209384019390910190600101613f0d565b888152876020820152866040820152856060820152613f4e6080820186613f09565b613f5b60c0820185613f09565b610100810192909252610120820152610140019695505050505050565b60006001600160401b0380831681851681830481118215151615613f9e57613f9e613d57565b02949350505050565b60006001600160401b0380841680613fc157613fc1613d41565b92169190910492915050565b60006001600160401b0380841680613fe757613fe7613d41565b92169190910692915050565b6001600160401b038181168382160190808211156132ad576132ad613d57565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161404b816017850160208801613e22565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161407c816028840160208801613e22565b01602801949350505050565b602081526000610f8c6020830184613e46565b838152826020820152600082516140b9816040850160208701613e22565b91909101604001949350505050565b6000816140d7576140d7613d57565b506000190190565b634e487b7160e01b600052603160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47b9d69e0ca90be54a40811e436234a7f7908b87ff2bec27e64f878b166da8e8e5a2646970667358221220ffb678ecd4044e4a781f91fe5afb5ced6d94bb85c3caa028aad81df5852a64e764736f6c63430008100033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61050e8061007e6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461007c5780638da5cb5b14610091578063e3a9db1a146100be578063f2fde38b14610102578063f340fa0114610122575b600080fd5b34801561006657600080fd5b5061007a61007536600461048d565b610135565b005b34801561008857600080fd5b5061007a6101ac565b34801561009d57600080fd5b506000546040516001600160a01b0390911681526020015b60405180910390f35b3480156100ca57600080fd5b506100f46100d936600461048d565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100b5565b34801561010e57600080fd5b5061007a61011d36600461048d565b6101c0565b61007a61013036600461048d565b61023e565b61013d6102b0565b6001600160a01b0381166000818152600160205260408120805491905590610165908261030a565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101a091815260200190565b60405180910390a25050565b6101b46102b0565b6101be6000610428565b565b6101c86102b0565b6001600160a01b0381166102325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61023b81610428565b50565b6102466102b0565b6001600160a01b0381166000908152600160205260408120805434928392916102709084906104b1565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101a0565b6000546001600160a01b031633146101be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610229565b8047101561035a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610229565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146103a7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ac565b606091505b50509050806104235760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610229565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461023b57600080fd5b60006020828403121561049f57600080fd5b81356104aa81610478565b9392505050565b808201808211156104d257634e487b7160e01b600052601160045260246000fd5b9291505056fea26469706673582212206fb4f990ff997db88feee170cb2b7ab9937e85cb31861a96846a4d809d251fab64736f6c63430008100033",
}

// DAEntranceABI is the input ABI used to generate the binding from.
// Deprecated: Use DAEntranceMetaData.ABI instead.
var DAEntranceABI = DAEntranceMetaData.ABI

// DAEntranceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DAEntranceMetaData.Bin instead.
var DAEntranceBin = DAEntranceMetaData.Bin

// DeployDAEntrance deploys a new Ethereum contract, binding an instance of DAEntrance to it.
func DeployDAEntrance(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *DAEntrance, error) {
	parsed, err := DAEntranceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DAEntranceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &DAEntrance{DAEntranceCaller: DAEntranceCaller{contract: contract}, DAEntranceTransactor: DAEntranceTransactor{contract: contract}, DAEntranceFilterer: DAEntranceFilterer{contract: contract}}, nil
}

// DAEntrance is an auto generated Go binding around an Ethereum contract.
type DAEntrance struct {
	DAEntranceCaller     // Read-only binding to the contract
	DAEntranceTransactor // Write-only binding to the contract
	DAEntranceFilterer   // Log filterer for contract events
}

// DAEntranceCaller is an auto generated read-only Go binding around an Ethereum contract.
type DAEntranceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAEntranceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DAEntranceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAEntranceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DAEntranceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DAEntranceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DAEntranceSession struct {
	Contract     *DAEntrance       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DAEntranceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DAEntranceCallerSession struct {
	Contract *DAEntranceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// DAEntranceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DAEntranceTransactorSession struct {
	Contract     *DAEntranceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// DAEntranceRaw is an auto generated low-level Go binding around an Ethereum contract.
type DAEntranceRaw struct {
	Contract *DAEntrance // Generic contract binding to access the raw methods on
}

// DAEntranceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DAEntranceCallerRaw struct {
	Contract *DAEntranceCaller // Generic read-only contract binding to access the raw methods on
}

// DAEntranceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DAEntranceTransactorRaw struct {
	Contract *DAEntranceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDAEntrance creates a new instance of DAEntrance, bound to a specific deployed contract.
func NewDAEntrance(address common.Address, backend bind.ContractBackend) (*DAEntrance, error) {
	contract, err := bindDAEntrance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &DAEntrance{DAEntranceCaller: DAEntranceCaller{contract: contract}, DAEntranceTransactor: DAEntranceTransactor{contract: contract}, DAEntranceFilterer: DAEntranceFilterer{contract: contract}}, nil
}

// NewDAEntranceCaller creates a new read-only instance of DAEntrance, bound to a specific deployed contract.
func NewDAEntranceCaller(address common.Address, caller bind.ContractCaller) (*DAEntranceCaller, error) {
	contract, err := bindDAEntrance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DAEntranceCaller{contract: contract}, nil
}

// NewDAEntranceTransactor creates a new write-only instance of DAEntrance, bound to a specific deployed contract.
func NewDAEntranceTransactor(address common.Address, transactor bind.ContractTransactor) (*DAEntranceTransactor, error) {
	contract, err := bindDAEntrance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DAEntranceTransactor{contract: contract}, nil
}

// NewDAEntranceFilterer creates a new log filterer instance of DAEntrance, bound to a specific deployed contract.
func NewDAEntranceFilterer(address common.Address, filterer bind.ContractFilterer) (*DAEntranceFilterer, error) {
	contract, err := bindDAEntrance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DAEntranceFilterer{contract: contract}, nil
}

// bindDAEntrance binds a generic wrapper to an already deployed contract.
func bindDAEntrance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := DAEntranceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DAEntrance *DAEntranceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DAEntrance.Contract.DAEntranceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DAEntrance *DAEntranceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.Contract.DAEntranceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DAEntrance *DAEntranceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DAEntrance.Contract.DAEntranceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_DAEntrance *DAEntranceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _DAEntrance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_DAEntrance *DAEntranceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_DAEntrance *DAEntranceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _DAEntrance.Contract.contract.Transact(opts, method, params...)
}

// DASIGNERS is a free data retrieval call binding the contract method 0x807f063a.
//
// Solidity: function DA_SIGNERS() view returns(address)
func (_DAEntrance *DAEntranceCaller) DASIGNERS(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "DA_SIGNERS")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DASIGNERS is a free data retrieval call binding the contract method 0x807f063a.
//
// Solidity: function DA_SIGNERS() view returns(address)
func (_DAEntrance *DAEntranceSession) DASIGNERS() (common.Address, error) {
	return _DAEntrance.Contract.DASIGNERS(&_DAEntrance.CallOpts)
}

// DASIGNERS is a free data retrieval call binding the contract method 0x807f063a.
//
// Solidity: function DA_SIGNERS() view returns(address)
func (_DAEntrance *DAEntranceCallerSession) DASIGNERS() (common.Address, error) {
	return _DAEntrance.Contract.DASIGNERS(&_DAEntrance.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DAEntrance.Contract.DEFAULTADMINROLE(&_DAEntrance.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _DAEntrance.Contract.DEFAULTADMINROLE(&_DAEntrance.CallOpts)
}

// MAXPODASTARGET is a free data retrieval call binding the contract method 0x8bdcc712.
//
// Solidity: function MAX_PODAS_TARGET() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) MAXPODASTARGET(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "MAX_PODAS_TARGET")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXPODASTARGET is a free data retrieval call binding the contract method 0x8bdcc712.
//
// Solidity: function MAX_PODAS_TARGET() view returns(uint256)
func (_DAEntrance *DAEntranceSession) MAXPODASTARGET() (*big.Int, error) {
	return _DAEntrance.Contract.MAXPODASTARGET(&_DAEntrance.CallOpts)
}

// MAXPODASTARGET is a free data retrieval call binding the contract method 0x8bdcc712.
//
// Solidity: function MAX_PODAS_TARGET() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) MAXPODASTARGET() (*big.Int, error) {
	return _DAEntrance.Contract.MAXPODASTARGET(&_DAEntrance.CallOpts)
}

// PARAMSADMINROLE is a free data retrieval call binding the contract method 0xb15d20da.
//
// Solidity: function PARAMS_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceCaller) PARAMSADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "PARAMS_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PARAMSADMINROLE is a free data retrieval call binding the contract method 0xb15d20da.
//
// Solidity: function PARAMS_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceSession) PARAMSADMINROLE() ([32]byte, error) {
	return _DAEntrance.Contract.PARAMSADMINROLE(&_DAEntrance.CallOpts)
}

// PARAMSADMINROLE is a free data retrieval call binding the contract method 0xb15d20da.
//
// Solidity: function PARAMS_ADMIN_ROLE() view returns(bytes32)
func (_DAEntrance *DAEntranceCallerSession) PARAMSADMINROLE() ([32]byte, error) {
	return _DAEntrance.Contract.PARAMSADMINROLE(&_DAEntrance.CallOpts)
}

// SLICEDENOMINATOR is a free data retrieval call binding the contract method 0x602b245a.
//
// Solidity: function SLICE_DENOMINATOR() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) SLICEDENOMINATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "SLICE_DENOMINATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SLICEDENOMINATOR is a free data retrieval call binding the contract method 0x602b245a.
//
// Solidity: function SLICE_DENOMINATOR() view returns(uint256)
func (_DAEntrance *DAEntranceSession) SLICEDENOMINATOR() (*big.Int, error) {
	return _DAEntrance.Contract.SLICEDENOMINATOR(&_DAEntrance.CallOpts)
}

// SLICEDENOMINATOR is a free data retrieval call binding the contract method 0x602b245a.
//
// Solidity: function SLICE_DENOMINATOR() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) SLICEDENOMINATOR() (*big.Int, error) {
	return _DAEntrance.Contract.SLICEDENOMINATOR(&_DAEntrance.CallOpts)
}

// SLICENUMERATOR is a free data retrieval call binding the contract method 0x5626a47b.
//
// Solidity: function SLICE_NUMERATOR() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) SLICENUMERATOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "SLICE_NUMERATOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SLICENUMERATOR is a free data retrieval call binding the contract method 0x5626a47b.
//
// Solidity: function SLICE_NUMERATOR() view returns(uint256)
func (_DAEntrance *DAEntranceSession) SLICENUMERATOR() (*big.Int, error) {
	return _DAEntrance.Contract.SLICENUMERATOR(&_DAEntrance.CallOpts)
}

// SLICENUMERATOR is a free data retrieval call binding the contract method 0x5626a47b.
//
// Solidity: function SLICE_NUMERATOR() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) SLICENUMERATOR() (*big.Int, error) {
	return _DAEntrance.Contract.SLICENUMERATOR(&_DAEntrance.CallOpts)
}

// ActivedReward is a free data retrieval call binding the contract method 0x12577052.
//
// Solidity: function activedReward() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) ActivedReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "activedReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActivedReward is a free data retrieval call binding the contract method 0x12577052.
//
// Solidity: function activedReward() view returns(uint256)
func (_DAEntrance *DAEntranceSession) ActivedReward() (*big.Int, error) {
	return _DAEntrance.Contract.ActivedReward(&_DAEntrance.CallOpts)
}

// ActivedReward is a free data retrieval call binding the contract method 0x12577052.
//
// Solidity: function activedReward() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) ActivedReward() (*big.Int, error) {
	return _DAEntrance.Contract.ActivedReward(&_DAEntrance.CallOpts)
}

// BaseReward is a free data retrieval call binding the contract method 0x76ad03bc.
//
// Solidity: function baseReward() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) BaseReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "baseReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BaseReward is a free data retrieval call binding the contract method 0x76ad03bc.
//
// Solidity: function baseReward() view returns(uint256)
func (_DAEntrance *DAEntranceSession) BaseReward() (*big.Int, error) {
	return _DAEntrance.Contract.BaseReward(&_DAEntrance.CallOpts)
}

// BaseReward is a free data retrieval call binding the contract method 0x76ad03bc.
//
// Solidity: function baseReward() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) BaseReward() (*big.Int, error) {
	return _DAEntrance.Contract.BaseReward(&_DAEntrance.CallOpts)
}

// BlobPrice is a free data retrieval call binding the contract method 0x3d00448a.
//
// Solidity: function blobPrice() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) BlobPrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "blobPrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BlobPrice is a free data retrieval call binding the contract method 0x3d00448a.
//
// Solidity: function blobPrice() view returns(uint256)
func (_DAEntrance *DAEntranceSession) BlobPrice() (*big.Int, error) {
	return _DAEntrance.Contract.BlobPrice(&_DAEntrance.CallOpts)
}

// BlobPrice is a free data retrieval call binding the contract method 0x3d00448a.
//
// Solidity: function blobPrice() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) BlobPrice() (*big.Int, error) {
	return _DAEntrance.Contract.BlobPrice(&_DAEntrance.CallOpts)
}

// CommitmentExists is a free data retrieval call binding the contract method 0x6a53525d.
//
// Solidity: function commitmentExists(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns(bool)
func (_DAEntrance *DAEntranceCaller) CommitmentExists(opts *bind.CallOpts, _dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (bool, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "commitmentExists", _dataRoot, _epoch, _quorumId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CommitmentExists is a free data retrieval call binding the contract method 0x6a53525d.
//
// Solidity: function commitmentExists(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns(bool)
func (_DAEntrance *DAEntranceSession) CommitmentExists(_dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (bool, error) {
	return _DAEntrance.Contract.CommitmentExists(&_DAEntrance.CallOpts, _dataRoot, _epoch, _quorumId)
}

// CommitmentExists is a free data retrieval call binding the contract method 0x6a53525d.
//
// Solidity: function commitmentExists(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns(bool)
func (_DAEntrance *DAEntranceCallerSession) CommitmentExists(_dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (bool, error) {
	return _DAEntrance.Contract.CommitmentExists(&_DAEntrance.CallOpts, _dataRoot, _epoch, _quorumId)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) CurrentEpoch(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "currentEpoch")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_DAEntrance *DAEntranceSession) CurrentEpoch() (*big.Int, error) {
	return _DAEntrance.Contract.CurrentEpoch(&_DAEntrance.CallOpts)
}

// CurrentEpoch is a free data retrieval call binding the contract method 0x76671808.
//
// Solidity: function currentEpoch() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) CurrentEpoch() (*big.Int, error) {
	return _DAEntrance.Contract.CurrentEpoch(&_DAEntrance.CallOpts)
}

// CurrentEpochReward is a free data retrieval call binding the contract method 0xe68e035b.
//
// Solidity: function currentEpochReward() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) CurrentEpochReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "currentEpochReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentEpochReward is a free data retrieval call binding the contract method 0xe68e035b.
//
// Solidity: function currentEpochReward() view returns(uint256)
func (_DAEntrance *DAEntranceSession) CurrentEpochReward() (*big.Int, error) {
	return _DAEntrance.Contract.CurrentEpochReward(&_DAEntrance.CallOpts)
}

// CurrentEpochReward is a free data retrieval call binding the contract method 0xe68e035b.
//
// Solidity: function currentEpochReward() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) CurrentEpochReward() (*big.Int, error) {
	return _DAEntrance.Contract.CurrentEpochReward(&_DAEntrance.CallOpts)
}

// CurrentSampleSeed is a free data retrieval call binding the contract method 0x9fae1fa4.
//
// Solidity: function currentSampleSeed() view returns(bytes32)
func (_DAEntrance *DAEntranceCaller) CurrentSampleSeed(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "currentSampleSeed")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentSampleSeed is a free data retrieval call binding the contract method 0x9fae1fa4.
//
// Solidity: function currentSampleSeed() view returns(bytes32)
func (_DAEntrance *DAEntranceSession) CurrentSampleSeed() ([32]byte, error) {
	return _DAEntrance.Contract.CurrentSampleSeed(&_DAEntrance.CallOpts)
}

// CurrentSampleSeed is a free data retrieval call binding the contract method 0x9fae1fa4.
//
// Solidity: function currentSampleSeed() view returns(bytes32)
func (_DAEntrance *DAEntranceCallerSession) CurrentSampleSeed() ([32]byte, error) {
	return _DAEntrance.Contract.CurrentSampleSeed(&_DAEntrance.CallOpts)
}

// EpochWindowSize is a free data retrieval call binding the contract method 0x3e898337.
//
// Solidity: function epochWindowSize() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) EpochWindowSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "epochWindowSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// EpochWindowSize is a free data retrieval call binding the contract method 0x3e898337.
//
// Solidity: function epochWindowSize() view returns(uint256)
func (_DAEntrance *DAEntranceSession) EpochWindowSize() (*big.Int, error) {
	return _DAEntrance.Contract.EpochWindowSize(&_DAEntrance.CallOpts)
}

// EpochWindowSize is a free data retrieval call binding the contract method 0x3e898337.
//
// Solidity: function epochWindowSize() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) EpochWindowSize() (*big.Int, error) {
	return _DAEntrance.Contract.EpochWindowSize(&_DAEntrance.CallOpts)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DAEntrance *DAEntranceCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DAEntrance *DAEntranceSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DAEntrance.Contract.GetRoleAdmin(&_DAEntrance.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_DAEntrance *DAEntranceCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _DAEntrance.Contract.GetRoleAdmin(&_DAEntrance.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_DAEntrance *DAEntranceCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_DAEntrance *DAEntranceSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _DAEntrance.Contract.GetRoleMember(&_DAEntrance.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_DAEntrance *DAEntranceCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _DAEntrance.Contract.GetRoleMember(&_DAEntrance.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_DAEntrance *DAEntranceCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_DAEntrance *DAEntranceSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _DAEntrance.Contract.GetRoleMemberCount(&_DAEntrance.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _DAEntrance.Contract.GetRoleMemberCount(&_DAEntrance.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DAEntrance *DAEntranceCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DAEntrance *DAEntranceSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DAEntrance.Contract.HasRole(&_DAEntrance.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_DAEntrance *DAEntranceCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _DAEntrance.Contract.HasRole(&_DAEntrance.CallOpts, role, account)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_DAEntrance *DAEntranceCaller) Initialized(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "initialized")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_DAEntrance *DAEntranceSession) Initialized() (bool, error) {
	return _DAEntrance.Contract.Initialized(&_DAEntrance.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() view returns(bool)
func (_DAEntrance *DAEntranceCallerSession) Initialized() (bool, error) {
	return _DAEntrance.Contract.Initialized(&_DAEntrance.CallOpts)
}

// NextSampleHeight is a free data retrieval call binding the contract method 0x7397eb33.
//
// Solidity: function nextSampleHeight() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) NextSampleHeight(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "nextSampleHeight")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextSampleHeight is a free data retrieval call binding the contract method 0x7397eb33.
//
// Solidity: function nextSampleHeight() view returns(uint256)
func (_DAEntrance *DAEntranceSession) NextSampleHeight() (*big.Int, error) {
	return _DAEntrance.Contract.NextSampleHeight(&_DAEntrance.CallOpts)
}

// NextSampleHeight is a free data retrieval call binding the contract method 0x7397eb33.
//
// Solidity: function nextSampleHeight() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) NextSampleHeight() (*big.Int, error) {
	return _DAEntrance.Contract.NextSampleHeight(&_DAEntrance.CallOpts)
}

// Payments is a free data retrieval call binding the contract method 0xe2982c21.
//
// Solidity: function payments(address dest) view returns(uint256)
func (_DAEntrance *DAEntranceCaller) Payments(opts *bind.CallOpts, dest common.Address) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "payments", dest)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Payments is a free data retrieval call binding the contract method 0xe2982c21.
//
// Solidity: function payments(address dest) view returns(uint256)
func (_DAEntrance *DAEntranceSession) Payments(dest common.Address) (*big.Int, error) {
	return _DAEntrance.Contract.Payments(&_DAEntrance.CallOpts, dest)
}

// Payments is a free data retrieval call binding the contract method 0xe2982c21.
//
// Solidity: function payments(address dest) view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) Payments(dest common.Address) (*big.Int, error) {
	return _DAEntrance.Contract.Payments(&_DAEntrance.CallOpts, dest)
}

// PodasTarget is a free data retrieval call binding the contract method 0xc8d3b359.
//
// Solidity: function podasTarget() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) PodasTarget(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "podasTarget")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PodasTarget is a free data retrieval call binding the contract method 0xc8d3b359.
//
// Solidity: function podasTarget() view returns(uint256)
func (_DAEntrance *DAEntranceSession) PodasTarget() (*big.Int, error) {
	return _DAEntrance.Contract.PodasTarget(&_DAEntrance.CallOpts)
}

// PodasTarget is a free data retrieval call binding the contract method 0xc8d3b359.
//
// Solidity: function podasTarget() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) PodasTarget() (*big.Int, error) {
	return _DAEntrance.Contract.PodasTarget(&_DAEntrance.CallOpts)
}

// RewardRatio is a free data retrieval call binding the contract method 0x646033bc.
//
// Solidity: function rewardRatio() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) RewardRatio(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "rewardRatio")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardRatio is a free data retrieval call binding the contract method 0x646033bc.
//
// Solidity: function rewardRatio() view returns(uint256)
func (_DAEntrance *DAEntranceSession) RewardRatio() (*big.Int, error) {
	return _DAEntrance.Contract.RewardRatio(&_DAEntrance.CallOpts)
}

// RewardRatio is a free data retrieval call binding the contract method 0x646033bc.
//
// Solidity: function rewardRatio() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) RewardRatio() (*big.Int, error) {
	return _DAEntrance.Contract.RewardRatio(&_DAEntrance.CallOpts)
}

// RoundSubmissions is a free data retrieval call binding the contract method 0xff187748.
//
// Solidity: function roundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) RoundSubmissions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "roundSubmissions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RoundSubmissions is a free data retrieval call binding the contract method 0xff187748.
//
// Solidity: function roundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceSession) RoundSubmissions() (*big.Int, error) {
	return _DAEntrance.Contract.RoundSubmissions(&_DAEntrance.CallOpts)
}

// RoundSubmissions is a free data retrieval call binding the contract method 0xff187748.
//
// Solidity: function roundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) RoundSubmissions() (*big.Int, error) {
	return _DAEntrance.Contract.RoundSubmissions(&_DAEntrance.CallOpts)
}

// SamplePeriod is a free data retrieval call binding the contract method 0x98920f57.
//
// Solidity: function samplePeriod() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) SamplePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "samplePeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SamplePeriod is a free data retrieval call binding the contract method 0x98920f57.
//
// Solidity: function samplePeriod() view returns(uint256)
func (_DAEntrance *DAEntranceSession) SamplePeriod() (*big.Int, error) {
	return _DAEntrance.Contract.SamplePeriod(&_DAEntrance.CallOpts)
}

// SamplePeriod is a free data retrieval call binding the contract method 0x98920f57.
//
// Solidity: function samplePeriod() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) SamplePeriod() (*big.Int, error) {
	return _DAEntrance.Contract.SamplePeriod(&_DAEntrance.CallOpts)
}

// SampleRound is a free data retrieval call binding the contract method 0x168a062c.
//
// Solidity: function sampleRound() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) SampleRound(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "sampleRound")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleRound is a free data retrieval call binding the contract method 0x168a062c.
//
// Solidity: function sampleRound() view returns(uint256)
func (_DAEntrance *DAEntranceSession) SampleRound() (*big.Int, error) {
	return _DAEntrance.Contract.SampleRound(&_DAEntrance.CallOpts)
}

// SampleRound is a free data retrieval call binding the contract method 0x168a062c.
//
// Solidity: function sampleRound() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) SampleRound() (*big.Int, error) {
	return _DAEntrance.Contract.SampleRound(&_DAEntrance.CallOpts)
}

// ServiceFee is a free data retrieval call binding the contract method 0x8abdf5aa.
//
// Solidity: function serviceFee() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) ServiceFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "serviceFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ServiceFee is a free data retrieval call binding the contract method 0x8abdf5aa.
//
// Solidity: function serviceFee() view returns(uint256)
func (_DAEntrance *DAEntranceSession) ServiceFee() (*big.Int, error) {
	return _DAEntrance.Contract.ServiceFee(&_DAEntrance.CallOpts)
}

// ServiceFee is a free data retrieval call binding the contract method 0x8abdf5aa.
//
// Solidity: function serviceFee() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) ServiceFee() (*big.Int, error) {
	return _DAEntrance.Contract.ServiceFee(&_DAEntrance.CallOpts)
}

// ServiceFeeRateBps is a free data retrieval call binding the contract method 0xc0575111.
//
// Solidity: function serviceFeeRateBps() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) ServiceFeeRateBps(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "serviceFeeRateBps")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ServiceFeeRateBps is a free data retrieval call binding the contract method 0xc0575111.
//
// Solidity: function serviceFeeRateBps() view returns(uint256)
func (_DAEntrance *DAEntranceSession) ServiceFeeRateBps() (*big.Int, error) {
	return _DAEntrance.Contract.ServiceFeeRateBps(&_DAEntrance.CallOpts)
}

// ServiceFeeRateBps is a free data retrieval call binding the contract method 0xc0575111.
//
// Solidity: function serviceFeeRateBps() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) ServiceFeeRateBps() (*big.Int, error) {
	return _DAEntrance.Contract.ServiceFeeRateBps(&_DAEntrance.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DAEntrance *DAEntranceCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DAEntrance *DAEntranceSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DAEntrance.Contract.SupportsInterface(&_DAEntrance.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_DAEntrance *DAEntranceCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _DAEntrance.Contract.SupportsInterface(&_DAEntrance.CallOpts, interfaceId)
}

// TargetRoundSubmissions is a free data retrieval call binding the contract method 0x2fc0534b.
//
// Solidity: function targetRoundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) TargetRoundSubmissions(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "targetRoundSubmissions")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TargetRoundSubmissions is a free data retrieval call binding the contract method 0x2fc0534b.
//
// Solidity: function targetRoundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceSession) TargetRoundSubmissions() (*big.Int, error) {
	return _DAEntrance.Contract.TargetRoundSubmissions(&_DAEntrance.CallOpts)
}

// TargetRoundSubmissions is a free data retrieval call binding the contract method 0x2fc0534b.
//
// Solidity: function targetRoundSubmissions() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) TargetRoundSubmissions() (*big.Int, error) {
	return _DAEntrance.Contract.TargetRoundSubmissions(&_DAEntrance.CallOpts)
}

// TargetRoundSubmissionsNext is a free data retrieval call binding the contract method 0x257a3aa3.
//
// Solidity: function targetRoundSubmissionsNext() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) TargetRoundSubmissionsNext(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "targetRoundSubmissionsNext")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TargetRoundSubmissionsNext is a free data retrieval call binding the contract method 0x257a3aa3.
//
// Solidity: function targetRoundSubmissionsNext() view returns(uint256)
func (_DAEntrance *DAEntranceSession) TargetRoundSubmissionsNext() (*big.Int, error) {
	return _DAEntrance.Contract.TargetRoundSubmissionsNext(&_DAEntrance.CallOpts)
}

// TargetRoundSubmissionsNext is a free data retrieval call binding the contract method 0x257a3aa3.
//
// Solidity: function targetRoundSubmissionsNext() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) TargetRoundSubmissionsNext() (*big.Int, error) {
	return _DAEntrance.Contract.TargetRoundSubmissionsNext(&_DAEntrance.CallOpts)
}

// TotalBaseReward is a free data retrieval call binding the contract method 0x7f1b5e43.
//
// Solidity: function totalBaseReward() view returns(uint256)
func (_DAEntrance *DAEntranceCaller) TotalBaseReward(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "totalBaseReward")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalBaseReward is a free data retrieval call binding the contract method 0x7f1b5e43.
//
// Solidity: function totalBaseReward() view returns(uint256)
func (_DAEntrance *DAEntranceSession) TotalBaseReward() (*big.Int, error) {
	return _DAEntrance.Contract.TotalBaseReward(&_DAEntrance.CallOpts)
}

// TotalBaseReward is a free data retrieval call binding the contract method 0x7f1b5e43.
//
// Solidity: function totalBaseReward() view returns(uint256)
func (_DAEntrance *DAEntranceCallerSession) TotalBaseReward() (*big.Int, error) {
	return _DAEntrance.Contract.TotalBaseReward(&_DAEntrance.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_DAEntrance *DAEntranceCaller) Treasury(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "treasury")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_DAEntrance *DAEntranceSession) Treasury() (common.Address, error) {
	return _DAEntrance.Contract.Treasury(&_DAEntrance.CallOpts)
}

// Treasury is a free data retrieval call binding the contract method 0x61d027b3.
//
// Solidity: function treasury() view returns(address)
func (_DAEntrance *DAEntranceCallerSession) Treasury() (common.Address, error) {
	return _DAEntrance.Contract.Treasury(&_DAEntrance.CallOpts)
}

// VerifiedErasureCommitment is a free data retrieval call binding the contract method 0x9da3a69b.
//
// Solidity: function verifiedErasureCommitment(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns((uint256,uint256))
func (_DAEntrance *DAEntranceCaller) VerifiedErasureCommitment(opts *bind.CallOpts, _dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (BN254G1Point, error) {
	var out []interface{}
	err := _DAEntrance.contract.Call(opts, &out, "verifiedErasureCommitment", _dataRoot, _epoch, _quorumId)

	if err != nil {
		return *new(BN254G1Point), err
	}

	out0 := *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)

	return out0, err

}

// VerifiedErasureCommitment is a free data retrieval call binding the contract method 0x9da3a69b.
//
// Solidity: function verifiedErasureCommitment(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns((uint256,uint256))
func (_DAEntrance *DAEntranceSession) VerifiedErasureCommitment(_dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (BN254G1Point, error) {
	return _DAEntrance.Contract.VerifiedErasureCommitment(&_DAEntrance.CallOpts, _dataRoot, _epoch, _quorumId)
}

// VerifiedErasureCommitment is a free data retrieval call binding the contract method 0x9da3a69b.
//
// Solidity: function verifiedErasureCommitment(bytes32 _dataRoot, uint256 _epoch, uint256 _quorumId) view returns((uint256,uint256))
func (_DAEntrance *DAEntranceCallerSession) VerifiedErasureCommitment(_dataRoot [32]byte, _epoch *big.Int, _quorumId *big.Int) (BN254G1Point, error) {
	return _DAEntrance.Contract.VerifiedErasureCommitment(&_DAEntrance.CallOpts, _dataRoot, _epoch, _quorumId)
}

// Donate is a paid mutator transaction binding the contract method 0xed88c68e.
//
// Solidity: function donate() payable returns()
func (_DAEntrance *DAEntranceTransactor) Donate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "donate")
}

// Donate is a paid mutator transaction binding the contract method 0xed88c68e.
//
// Solidity: function donate() payable returns()
func (_DAEntrance *DAEntranceSession) Donate() (*types.Transaction, error) {
	return _DAEntrance.Contract.Donate(&_DAEntrance.TransactOpts)
}

// Donate is a paid mutator transaction binding the contract method 0xed88c68e.
//
// Solidity: function donate() payable returns()
func (_DAEntrance *DAEntranceTransactorSession) Donate() (*types.Transaction, error) {
	return _DAEntrance.Contract.Donate(&_DAEntrance.TransactOpts)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.GrantRole(&_DAEntrance.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.GrantRole(&_DAEntrance.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DAEntrance *DAEntranceTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DAEntrance *DAEntranceSession) Initialize() (*types.Transaction, error) {
	return _DAEntrance.Contract.Initialize(&_DAEntrance.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_DAEntrance *DAEntranceTransactorSession) Initialize() (*types.Transaction, error) {
	return _DAEntrance.Contract.Initialize(&_DAEntrance.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.RenounceRole(&_DAEntrance.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.RenounceRole(&_DAEntrance.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.RevokeRole(&_DAEntrance.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_DAEntrance *DAEntranceTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.RevokeRole(&_DAEntrance.TransactOpts, role, account)
}

// SampleRange is a paid mutator transaction binding the contract method 0x6efc2555.
//
// Solidity: function sampleRange() returns((uint64,uint64))
func (_DAEntrance *DAEntranceTransactor) SampleRange(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "sampleRange")
}

// SampleRange is a paid mutator transaction binding the contract method 0x6efc2555.
//
// Solidity: function sampleRange() returns((uint64,uint64))
func (_DAEntrance *DAEntranceSession) SampleRange() (*types.Transaction, error) {
	return _DAEntrance.Contract.SampleRange(&_DAEntrance.TransactOpts)
}

// SampleRange is a paid mutator transaction binding the contract method 0x6efc2555.
//
// Solidity: function sampleRange() returns((uint64,uint64))
func (_DAEntrance *DAEntranceTransactorSession) SampleRange() (*types.Transaction, error) {
	return _DAEntrance.Contract.SampleRange(&_DAEntrance.TransactOpts)
}

// SampleTask is a paid mutator transaction binding the contract method 0x988ea94e.
//
// Solidity: function sampleTask() returns((bytes32,uint256,uint64))
func (_DAEntrance *DAEntranceTransactor) SampleTask(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "sampleTask")
}

// SampleTask is a paid mutator transaction binding the contract method 0x988ea94e.
//
// Solidity: function sampleTask() returns((bytes32,uint256,uint64))
func (_DAEntrance *DAEntranceSession) SampleTask() (*types.Transaction, error) {
	return _DAEntrance.Contract.SampleTask(&_DAEntrance.TransactOpts)
}

// SampleTask is a paid mutator transaction binding the contract method 0x988ea94e.
//
// Solidity: function sampleTask() returns((bytes32,uint256,uint64))
func (_DAEntrance *DAEntranceTransactorSession) SampleTask() (*types.Transaction, error) {
	return _DAEntrance.Contract.SampleTask(&_DAEntrance.TransactOpts)
}

// SetBaseReward is a paid mutator transaction binding the contract method 0x0373a23a.
//
// Solidity: function setBaseReward(uint256 _baseReward) returns()
func (_DAEntrance *DAEntranceTransactor) SetBaseReward(opts *bind.TransactOpts, _baseReward *big.Int) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setBaseReward", _baseReward)
}

// SetBaseReward is a paid mutator transaction binding the contract method 0x0373a23a.
//
// Solidity: function setBaseReward(uint256 _baseReward) returns()
func (_DAEntrance *DAEntranceSession) SetBaseReward(_baseReward *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetBaseReward(&_DAEntrance.TransactOpts, _baseReward)
}

// SetBaseReward is a paid mutator transaction binding the contract method 0x0373a23a.
//
// Solidity: function setBaseReward(uint256 _baseReward) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetBaseReward(_baseReward *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetBaseReward(&_DAEntrance.TransactOpts, _baseReward)
}

// SetBlobPrice is a paid mutator transaction binding the contract method 0x23dd60a6.
//
// Solidity: function setBlobPrice(uint256 _blobPrice) returns()
func (_DAEntrance *DAEntranceTransactor) SetBlobPrice(opts *bind.TransactOpts, _blobPrice *big.Int) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setBlobPrice", _blobPrice)
}

// SetBlobPrice is a paid mutator transaction binding the contract method 0x23dd60a6.
//
// Solidity: function setBlobPrice(uint256 _blobPrice) returns()
func (_DAEntrance *DAEntranceSession) SetBlobPrice(_blobPrice *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetBlobPrice(&_DAEntrance.TransactOpts, _blobPrice)
}

// SetBlobPrice is a paid mutator transaction binding the contract method 0x23dd60a6.
//
// Solidity: function setBlobPrice(uint256 _blobPrice) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetBlobPrice(_blobPrice *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetBlobPrice(&_DAEntrance.TransactOpts, _blobPrice)
}

// SetEpochWindowSize is a paid mutator transaction binding the contract method 0xb1be17ab.
//
// Solidity: function setEpochWindowSize(uint64 _epochWindowSize) returns()
func (_DAEntrance *DAEntranceTransactor) SetEpochWindowSize(opts *bind.TransactOpts, _epochWindowSize uint64) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setEpochWindowSize", _epochWindowSize)
}

// SetEpochWindowSize is a paid mutator transaction binding the contract method 0xb1be17ab.
//
// Solidity: function setEpochWindowSize(uint64 _epochWindowSize) returns()
func (_DAEntrance *DAEntranceSession) SetEpochWindowSize(_epochWindowSize uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetEpochWindowSize(&_DAEntrance.TransactOpts, _epochWindowSize)
}

// SetEpochWindowSize is a paid mutator transaction binding the contract method 0xb1be17ab.
//
// Solidity: function setEpochWindowSize(uint64 _epochWindowSize) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetEpochWindowSize(_epochWindowSize uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetEpochWindowSize(&_DAEntrance.TransactOpts, _epochWindowSize)
}

// SetRewardRatio is a paid mutator transaction binding the contract method 0x3bab2a70.
//
// Solidity: function setRewardRatio(uint64 _rewardRatio) returns()
func (_DAEntrance *DAEntranceTransactor) SetRewardRatio(opts *bind.TransactOpts, _rewardRatio uint64) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setRewardRatio", _rewardRatio)
}

// SetRewardRatio is a paid mutator transaction binding the contract method 0x3bab2a70.
//
// Solidity: function setRewardRatio(uint64 _rewardRatio) returns()
func (_DAEntrance *DAEntranceSession) SetRewardRatio(_rewardRatio uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetRewardRatio(&_DAEntrance.TransactOpts, _rewardRatio)
}

// SetRewardRatio is a paid mutator transaction binding the contract method 0x3bab2a70.
//
// Solidity: function setRewardRatio(uint64 _rewardRatio) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetRewardRatio(_rewardRatio uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetRewardRatio(&_DAEntrance.TransactOpts, _rewardRatio)
}

// SetRoundSubmissions is a paid mutator transaction binding the contract method 0x88521ec7.
//
// Solidity: function setRoundSubmissions(uint64 _targetRoundSubmissions) returns()
func (_DAEntrance *DAEntranceTransactor) SetRoundSubmissions(opts *bind.TransactOpts, _targetRoundSubmissions uint64) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setRoundSubmissions", _targetRoundSubmissions)
}

// SetRoundSubmissions is a paid mutator transaction binding the contract method 0x88521ec7.
//
// Solidity: function setRoundSubmissions(uint64 _targetRoundSubmissions) returns()
func (_DAEntrance *DAEntranceSession) SetRoundSubmissions(_targetRoundSubmissions uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetRoundSubmissions(&_DAEntrance.TransactOpts, _targetRoundSubmissions)
}

// SetRoundSubmissions is a paid mutator transaction binding the contract method 0x88521ec7.
//
// Solidity: function setRoundSubmissions(uint64 _targetRoundSubmissions) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetRoundSubmissions(_targetRoundSubmissions uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetRoundSubmissions(&_DAEntrance.TransactOpts, _targetRoundSubmissions)
}

// SetSamplePeriod is a paid mutator transaction binding the contract method 0x1192de9a.
//
// Solidity: function setSamplePeriod(uint64 samplePeriod_) returns()
func (_DAEntrance *DAEntranceTransactor) SetSamplePeriod(opts *bind.TransactOpts, samplePeriod_ uint64) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setSamplePeriod", samplePeriod_)
}

// SetSamplePeriod is a paid mutator transaction binding the contract method 0x1192de9a.
//
// Solidity: function setSamplePeriod(uint64 samplePeriod_) returns()
func (_DAEntrance *DAEntranceSession) SetSamplePeriod(samplePeriod_ uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetSamplePeriod(&_DAEntrance.TransactOpts, samplePeriod_)
}

// SetSamplePeriod is a paid mutator transaction binding the contract method 0x1192de9a.
//
// Solidity: function setSamplePeriod(uint64 samplePeriod_) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetSamplePeriod(samplePeriod_ uint64) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetSamplePeriod(&_DAEntrance.TransactOpts, samplePeriod_)
}

// SetServiceFeeRate is a paid mutator transaction binding the contract method 0x9b1d3091.
//
// Solidity: function setServiceFeeRate(uint256 bps) returns()
func (_DAEntrance *DAEntranceTransactor) SetServiceFeeRate(opts *bind.TransactOpts, bps *big.Int) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setServiceFeeRate", bps)
}

// SetServiceFeeRate is a paid mutator transaction binding the contract method 0x9b1d3091.
//
// Solidity: function setServiceFeeRate(uint256 bps) returns()
func (_DAEntrance *DAEntranceSession) SetServiceFeeRate(bps *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetServiceFeeRate(&_DAEntrance.TransactOpts, bps)
}

// SetServiceFeeRate is a paid mutator transaction binding the contract method 0x9b1d3091.
//
// Solidity: function setServiceFeeRate(uint256 bps) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetServiceFeeRate(bps *big.Int) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetServiceFeeRate(&_DAEntrance.TransactOpts, bps)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address treasury_) returns()
func (_DAEntrance *DAEntranceTransactor) SetTreasury(opts *bind.TransactOpts, treasury_ common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "setTreasury", treasury_)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address treasury_) returns()
func (_DAEntrance *DAEntranceSession) SetTreasury(treasury_ common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetTreasury(&_DAEntrance.TransactOpts, treasury_)
}

// SetTreasury is a paid mutator transaction binding the contract method 0xf0f44260.
//
// Solidity: function setTreasury(address treasury_) returns()
func (_DAEntrance *DAEntranceTransactorSession) SetTreasury(treasury_ common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.SetTreasury(&_DAEntrance.TransactOpts, treasury_)
}

// SubmitOriginalData is a paid mutator transaction binding the contract method 0xd4ae59c9.
//
// Solidity: function submitOriginalData(bytes32[] _dataRoots) payable returns()
func (_DAEntrance *DAEntranceTransactor) SubmitOriginalData(opts *bind.TransactOpts, _dataRoots [][32]byte) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "submitOriginalData", _dataRoots)
}

// SubmitOriginalData is a paid mutator transaction binding the contract method 0xd4ae59c9.
//
// Solidity: function submitOriginalData(bytes32[] _dataRoots) payable returns()
func (_DAEntrance *DAEntranceSession) SubmitOriginalData(_dataRoots [][32]byte) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitOriginalData(&_DAEntrance.TransactOpts, _dataRoots)
}

// SubmitOriginalData is a paid mutator transaction binding the contract method 0xd4ae59c9.
//
// Solidity: function submitOriginalData(bytes32[] _dataRoots) payable returns()
func (_DAEntrance *DAEntranceTransactorSession) SubmitOriginalData(_dataRoots [][32]byte) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitOriginalData(&_DAEntrance.TransactOpts, _dataRoots)
}

// SubmitSamplingResponse is a paid mutator transaction binding the contract method 0xf6902775.
//
// Solidity: function submitSamplingResponse((bytes32,uint64,uint64,uint32,uint32,uint256,bytes32,bytes32[3],bytes32[],bytes) rep) returns()
func (_DAEntrance *DAEntranceTransactor) SubmitSamplingResponse(opts *bind.TransactOpts, rep SampleResponse) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "submitSamplingResponse", rep)
}

// SubmitSamplingResponse is a paid mutator transaction binding the contract method 0xf6902775.
//
// Solidity: function submitSamplingResponse((bytes32,uint64,uint64,uint32,uint32,uint256,bytes32,bytes32[3],bytes32[],bytes) rep) returns()
func (_DAEntrance *DAEntranceSession) SubmitSamplingResponse(rep SampleResponse) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitSamplingResponse(&_DAEntrance.TransactOpts, rep)
}

// SubmitSamplingResponse is a paid mutator transaction binding the contract method 0xf6902775.
//
// Solidity: function submitSamplingResponse((bytes32,uint64,uint64,uint32,uint32,uint256,bytes32,bytes32[3],bytes32[],bytes) rep) returns()
func (_DAEntrance *DAEntranceTransactorSession) SubmitSamplingResponse(rep SampleResponse) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitSamplingResponse(&_DAEntrance.TransactOpts, rep)
}

// SubmitVerifiedCommitRoots is a paid mutator transaction binding the contract method 0xeafed6ce.
//
// Solidity: function submitVerifiedCommitRoots((bytes32,uint256,uint256,(uint256,uint256),bytes,(uint256[2],uint256[2]),(uint256,uint256))[] _submissions) returns()
func (_DAEntrance *DAEntranceTransactor) SubmitVerifiedCommitRoots(opts *bind.TransactOpts, _submissions []IDAEntranceCommitRootSubmission) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "submitVerifiedCommitRoots", _submissions)
}

// SubmitVerifiedCommitRoots is a paid mutator transaction binding the contract method 0xeafed6ce.
//
// Solidity: function submitVerifiedCommitRoots((bytes32,uint256,uint256,(uint256,uint256),bytes,(uint256[2],uint256[2]),(uint256,uint256))[] _submissions) returns()
func (_DAEntrance *DAEntranceSession) SubmitVerifiedCommitRoots(_submissions []IDAEntranceCommitRootSubmission) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitVerifiedCommitRoots(&_DAEntrance.TransactOpts, _submissions)
}

// SubmitVerifiedCommitRoots is a paid mutator transaction binding the contract method 0xeafed6ce.
//
// Solidity: function submitVerifiedCommitRoots((bytes32,uint256,uint256,(uint256,uint256),bytes,(uint256[2],uint256[2]),(uint256,uint256))[] _submissions) returns()
func (_DAEntrance *DAEntranceTransactorSession) SubmitVerifiedCommitRoots(_submissions []IDAEntranceCommitRootSubmission) (*types.Transaction, error) {
	return _DAEntrance.Contract.SubmitVerifiedCommitRoots(&_DAEntrance.TransactOpts, _submissions)
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_DAEntrance *DAEntranceTransactor) Sync(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "sync")
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_DAEntrance *DAEntranceSession) Sync() (*types.Transaction, error) {
	return _DAEntrance.Contract.Sync(&_DAEntrance.TransactOpts)
}

// Sync is a paid mutator transaction binding the contract method 0xfff6cae9.
//
// Solidity: function sync() returns()
func (_DAEntrance *DAEntranceTransactorSession) Sync() (*types.Transaction, error) {
	return _DAEntrance.Contract.Sync(&_DAEntrance.TransactOpts)
}

// WithdrawPayments is a paid mutator transaction binding the contract method 0x31b3eb94.
//
// Solidity: function withdrawPayments(address payee) returns()
func (_DAEntrance *DAEntranceTransactor) WithdrawPayments(opts *bind.TransactOpts, payee common.Address) (*types.Transaction, error) {
	return _DAEntrance.contract.Transact(opts, "withdrawPayments", payee)
}

// WithdrawPayments is a paid mutator transaction binding the contract method 0x31b3eb94.
//
// Solidity: function withdrawPayments(address payee) returns()
func (_DAEntrance *DAEntranceSession) WithdrawPayments(payee common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.WithdrawPayments(&_DAEntrance.TransactOpts, payee)
}

// WithdrawPayments is a paid mutator transaction binding the contract method 0x31b3eb94.
//
// Solidity: function withdrawPayments(address payee) returns()
func (_DAEntrance *DAEntranceTransactorSession) WithdrawPayments(payee common.Address) (*types.Transaction, error) {
	return _DAEntrance.Contract.WithdrawPayments(&_DAEntrance.TransactOpts, payee)
}

// DAEntranceDARewardIterator is returned from FilterDAReward and is used to iterate over the raw logs and unpacked data for DAReward events raised by the DAEntrance contract.
type DAEntranceDARewardIterator struct {
	Event *DAEntranceDAReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceDARewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceDAReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceDAReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceDARewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceDARewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceDAReward represents a DAReward event raised by the DAEntrance contract.
type DAEntranceDAReward struct {
	Beneficiary  common.Address
	SampleRound  *big.Int
	Epoch        *big.Int
	QuorumId     *big.Int
	DataRoot     [32]byte
	Quality      *big.Int
	LineIndex    *big.Int
	SublineIndex *big.Int
	Reward       *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDAReward is a free log retrieval operation binding the contract event 0xc3898eb7106c1cb2f727da316a76320c0035f5692950aa7f6b65d20a5efaedc5.
//
// Solidity: event DAReward(address indexed beneficiary, uint256 indexed sampleRound, uint256 indexed epoch, uint256 quorumId, bytes32 dataRoot, uint256 quality, uint256 lineIndex, uint256 sublineIndex, uint256 reward)
func (_DAEntrance *DAEntranceFilterer) FilterDAReward(opts *bind.FilterOpts, beneficiary []common.Address, sampleRound []*big.Int, epoch []*big.Int) (*DAEntranceDARewardIterator, error) {

	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}
	var sampleRoundRule []interface{}
	for _, sampleRoundItem := range sampleRound {
		sampleRoundRule = append(sampleRoundRule, sampleRoundItem)
	}
	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "DAReward", beneficiaryRule, sampleRoundRule, epochRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceDARewardIterator{contract: _DAEntrance.contract, event: "DAReward", logs: logs, sub: sub}, nil
}

// WatchDAReward is a free log subscription operation binding the contract event 0xc3898eb7106c1cb2f727da316a76320c0035f5692950aa7f6b65d20a5efaedc5.
//
// Solidity: event DAReward(address indexed beneficiary, uint256 indexed sampleRound, uint256 indexed epoch, uint256 quorumId, bytes32 dataRoot, uint256 quality, uint256 lineIndex, uint256 sublineIndex, uint256 reward)
func (_DAEntrance *DAEntranceFilterer) WatchDAReward(opts *bind.WatchOpts, sink chan<- *DAEntranceDAReward, beneficiary []common.Address, sampleRound []*big.Int, epoch []*big.Int) (event.Subscription, error) {

	var beneficiaryRule []interface{}
	for _, beneficiaryItem := range beneficiary {
		beneficiaryRule = append(beneficiaryRule, beneficiaryItem)
	}
	var sampleRoundRule []interface{}
	for _, sampleRoundItem := range sampleRound {
		sampleRoundRule = append(sampleRoundRule, sampleRoundItem)
	}
	var epochRule []interface{}
	for _, epochItem := range epoch {
		epochRule = append(epochRule, epochItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "DAReward", beneficiaryRule, sampleRoundRule, epochRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceDAReward)
				if err := _DAEntrance.contract.UnpackLog(event, "DAReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDAReward is a log parse operation binding the contract event 0xc3898eb7106c1cb2f727da316a76320c0035f5692950aa7f6b65d20a5efaedc5.
//
// Solidity: event DAReward(address indexed beneficiary, uint256 indexed sampleRound, uint256 indexed epoch, uint256 quorumId, bytes32 dataRoot, uint256 quality, uint256 lineIndex, uint256 sublineIndex, uint256 reward)
func (_DAEntrance *DAEntranceFilterer) ParseDAReward(log types.Log) (*DAEntranceDAReward, error) {
	event := new(DAEntranceDAReward)
	if err := _DAEntrance.contract.UnpackLog(event, "DAReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceDataUploadIterator is returned from FilterDataUpload and is used to iterate over the raw logs and unpacked data for DataUpload events raised by the DAEntrance contract.
type DAEntranceDataUploadIterator struct {
	Event *DAEntranceDataUpload // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceDataUploadIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceDataUpload)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceDataUpload)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceDataUploadIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceDataUploadIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceDataUpload represents a DataUpload event raised by the DAEntrance contract.
type DAEntranceDataUpload struct {
	DataRoot [32]byte
	Epoch    *big.Int
	QuorumId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterDataUpload is a free log retrieval operation binding the contract event 0xf0bf37f8713754493879920443065424c575888634675f146c115709bbb59acb.
//
// Solidity: event DataUpload(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) FilterDataUpload(opts *bind.FilterOpts) (*DAEntranceDataUploadIterator, error) {

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "DataUpload")
	if err != nil {
		return nil, err
	}
	return &DAEntranceDataUploadIterator{contract: _DAEntrance.contract, event: "DataUpload", logs: logs, sub: sub}, nil
}

// WatchDataUpload is a free log subscription operation binding the contract event 0xf0bf37f8713754493879920443065424c575888634675f146c115709bbb59acb.
//
// Solidity: event DataUpload(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) WatchDataUpload(opts *bind.WatchOpts, sink chan<- *DAEntranceDataUpload) (event.Subscription, error) {

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "DataUpload")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceDataUpload)
				if err := _DAEntrance.contract.UnpackLog(event, "DataUpload", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDataUpload is a log parse operation binding the contract event 0xf0bf37f8713754493879920443065424c575888634675f146c115709bbb59acb.
//
// Solidity: event DataUpload(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) ParseDataUpload(log types.Log) (*DAEntranceDataUpload, error) {
	event := new(DAEntranceDataUpload)
	if err := _DAEntrance.contract.UnpackLog(event, "DataUpload", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceErasureCommitmentVerifiedIterator is returned from FilterErasureCommitmentVerified and is used to iterate over the raw logs and unpacked data for ErasureCommitmentVerified events raised by the DAEntrance contract.
type DAEntranceErasureCommitmentVerifiedIterator struct {
	Event *DAEntranceErasureCommitmentVerified // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceErasureCommitmentVerifiedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceErasureCommitmentVerified)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceErasureCommitmentVerified)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceErasureCommitmentVerifiedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceErasureCommitmentVerifiedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceErasureCommitmentVerified represents a ErasureCommitmentVerified event raised by the DAEntrance contract.
type DAEntranceErasureCommitmentVerified struct {
	DataRoot [32]byte
	Epoch    *big.Int
	QuorumId *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterErasureCommitmentVerified is a free log retrieval operation binding the contract event 0x0f1b20d87bebd11dddaaab51f01cf2726880cb3f8073b636dbafa2aa8cacd256.
//
// Solidity: event ErasureCommitmentVerified(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) FilterErasureCommitmentVerified(opts *bind.FilterOpts) (*DAEntranceErasureCommitmentVerifiedIterator, error) {

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "ErasureCommitmentVerified")
	if err != nil {
		return nil, err
	}
	return &DAEntranceErasureCommitmentVerifiedIterator{contract: _DAEntrance.contract, event: "ErasureCommitmentVerified", logs: logs, sub: sub}, nil
}

// WatchErasureCommitmentVerified is a free log subscription operation binding the contract event 0x0f1b20d87bebd11dddaaab51f01cf2726880cb3f8073b636dbafa2aa8cacd256.
//
// Solidity: event ErasureCommitmentVerified(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) WatchErasureCommitmentVerified(opts *bind.WatchOpts, sink chan<- *DAEntranceErasureCommitmentVerified) (event.Subscription, error) {

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "ErasureCommitmentVerified")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceErasureCommitmentVerified)
				if err := _DAEntrance.contract.UnpackLog(event, "ErasureCommitmentVerified", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseErasureCommitmentVerified is a log parse operation binding the contract event 0x0f1b20d87bebd11dddaaab51f01cf2726880cb3f8073b636dbafa2aa8cacd256.
//
// Solidity: event ErasureCommitmentVerified(bytes32 dataRoot, uint256 epoch, uint256 quorumId)
func (_DAEntrance *DAEntranceFilterer) ParseErasureCommitmentVerified(log types.Log) (*DAEntranceErasureCommitmentVerified, error) {
	event := new(DAEntranceErasureCommitmentVerified)
	if err := _DAEntrance.contract.UnpackLog(event, "ErasureCommitmentVerified", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceNewSampleRoundIterator is returned from FilterNewSampleRound and is used to iterate over the raw logs and unpacked data for NewSampleRound events raised by the DAEntrance contract.
type DAEntranceNewSampleRoundIterator struct {
	Event *DAEntranceNewSampleRound // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceNewSampleRoundIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceNewSampleRound)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceNewSampleRound)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceNewSampleRoundIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceNewSampleRoundIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceNewSampleRound represents a NewSampleRound event raised by the DAEntrance contract.
type DAEntranceNewSampleRound struct {
	SampleRound  *big.Int
	SampleHeight *big.Int
	SampleSeed   [32]byte
	PodasTarget  *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterNewSampleRound is a free log retrieval operation binding the contract event 0xdfb5db5886e81f083727f21152a2a83457e99364e9f104e1aa10bbd6d9b4b95f.
//
// Solidity: event NewSampleRound(uint256 indexed sampleRound, uint256 sampleHeight, bytes32 sampleSeed, uint256 podasTarget)
func (_DAEntrance *DAEntranceFilterer) FilterNewSampleRound(opts *bind.FilterOpts, sampleRound []*big.Int) (*DAEntranceNewSampleRoundIterator, error) {

	var sampleRoundRule []interface{}
	for _, sampleRoundItem := range sampleRound {
		sampleRoundRule = append(sampleRoundRule, sampleRoundItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "NewSampleRound", sampleRoundRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceNewSampleRoundIterator{contract: _DAEntrance.contract, event: "NewSampleRound", logs: logs, sub: sub}, nil
}

// WatchNewSampleRound is a free log subscription operation binding the contract event 0xdfb5db5886e81f083727f21152a2a83457e99364e9f104e1aa10bbd6d9b4b95f.
//
// Solidity: event NewSampleRound(uint256 indexed sampleRound, uint256 sampleHeight, bytes32 sampleSeed, uint256 podasTarget)
func (_DAEntrance *DAEntranceFilterer) WatchNewSampleRound(opts *bind.WatchOpts, sink chan<- *DAEntranceNewSampleRound, sampleRound []*big.Int) (event.Subscription, error) {

	var sampleRoundRule []interface{}
	for _, sampleRoundItem := range sampleRound {
		sampleRoundRule = append(sampleRoundRule, sampleRoundItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "NewSampleRound", sampleRoundRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceNewSampleRound)
				if err := _DAEntrance.contract.UnpackLog(event, "NewSampleRound", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewSampleRound is a log parse operation binding the contract event 0xdfb5db5886e81f083727f21152a2a83457e99364e9f104e1aa10bbd6d9b4b95f.
//
// Solidity: event NewSampleRound(uint256 indexed sampleRound, uint256 sampleHeight, bytes32 sampleSeed, uint256 podasTarget)
func (_DAEntrance *DAEntranceFilterer) ParseNewSampleRound(log types.Log) (*DAEntranceNewSampleRound, error) {
	event := new(DAEntranceNewSampleRound)
	if err := _DAEntrance.contract.UnpackLog(event, "NewSampleRound", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the DAEntrance contract.
type DAEntranceRoleAdminChangedIterator struct {
	Event *DAEntranceRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceRoleAdminChanged represents a RoleAdminChanged event raised by the DAEntrance contract.
type DAEntranceRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DAEntrance *DAEntranceFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*DAEntranceRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceRoleAdminChangedIterator{contract: _DAEntrance.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DAEntrance *DAEntranceFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *DAEntranceRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceRoleAdminChanged)
				if err := _DAEntrance.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_DAEntrance *DAEntranceFilterer) ParseRoleAdminChanged(log types.Log) (*DAEntranceRoleAdminChanged, error) {
	event := new(DAEntranceRoleAdminChanged)
	if err := _DAEntrance.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the DAEntrance contract.
type DAEntranceRoleGrantedIterator struct {
	Event *DAEntranceRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceRoleGranted represents a RoleGranted event raised by the DAEntrance contract.
type DAEntranceRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DAEntranceRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceRoleGrantedIterator{contract: _DAEntrance.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *DAEntranceRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceRoleGranted)
				if err := _DAEntrance.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) ParseRoleGranted(log types.Log) (*DAEntranceRoleGranted, error) {
	event := new(DAEntranceRoleGranted)
	if err := _DAEntrance.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DAEntranceRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the DAEntrance contract.
type DAEntranceRoleRevokedIterator struct {
	Event *DAEntranceRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DAEntranceRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DAEntranceRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DAEntranceRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DAEntranceRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DAEntranceRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DAEntranceRoleRevoked represents a RoleRevoked event raised by the DAEntrance contract.
type DAEntranceRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*DAEntranceRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DAEntrance.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &DAEntranceRoleRevokedIterator{contract: _DAEntrance.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *DAEntranceRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _DAEntrance.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DAEntranceRoleRevoked)
				if err := _DAEntrance.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_DAEntrance *DAEntranceFilterer) ParseRoleRevoked(log types.Log) (*DAEntranceRoleRevoked, error) {
	event := new(DAEntranceRoleRevoked)
	if err := _DAEntrance.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
